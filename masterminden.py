import random
import itertools

# --- Helper Functions ---

def generate_secret_code():
    """
    Generates a 4-digit unique secret code (no duplicate digits).
    Examples: "1234", "0987", "5012".
    """
    digits = [str(i) for i in range(10)] # List of digits from '0' to '9'
    random.shuffle(digits) # Shuffle the digits randomly
    
    # Select the first 4 shuffled digits
    code = "".join(digits[:4]) 
    return code

def calculate_feedback(secret_code, guess):
    """
    Calculates 'bulls' (centrate) and 'cows' (necentrate).
    
    'Bulls': Digits that are correct AND in the correct position.
    'Cows': Digits that are correct, but in the wrong position.
    """
    bulls = 0
    cows = 0

    # Count bulls first
    for i in range(4):
        if guess[i] == secret_code[i]:
            bulls += 1
    
    # Count total correct digits (regardless of position) using sets
    secret_set = set(secret_code)
    guess_set = set(guess)
    common_digits = len(secret_set.intersection(guess_set))
    
    # Cows are total common digits minus the bulls
    cows = common_digits - bulls
            
    return bulls, cows

def is_valid_code(code):
    """
    Checks if a string is a valid 4-digit unique code.
    """
    # Check length, if it contains only digits, and if all digits are unique
    return len(code) == 4 and code.isdigit() and len(set(code)) == 4

# --- Round 1: Player is the Guesser, Computer is the Code Maker ---

def player_guesses_round():
    """
    The player tries to guess the code generated by the computer.
    """
    print("\n--- Round 1: Computer is the Code Maker ---")
    computer_secret_code = generate_secret_code()
    num_attempts = 0
    max_attempts = 10 # Player has a maximum number of attempts

    print(f"I have generated a 4-digit unique secret code. You have {max_attempts} attempts.")

    while num_attempts < max_attempts:
        num_attempts += 1
        print(f"\nAttempt {num_attempts}/{max_attempts}:")
        
        player_guess = input("Enter your guess (4 unique digits): ")

        # Validate player's input
        if not is_valid_code(player_guess):
            print("Invalid input. Please enter exactly 4 unique digits.")
            num_attempts -= 1 # Don't penalize for invalid input
            continue

        bulls, cows = calculate_feedback(computer_secret_code, player_guess)

        # Updated feedback message
        print(f"Feedback: {bulls} bulls, {cows} cows.")

        if bulls == 4:
            print(f"\n🥳 Congratulations! You guessed the code '{computer_secret_code}' in {num_attempts} attempts!")
            return True # Player won the round
    
    print(f"\n🥲 You ran out of {max_attempts} attempts. The secret code was '{computer_secret_code}'.")
    return False # Player lost the round

# --- Round 2: Computer is the Guesser, Player is the Code Maker ---

def generate_all_possible_codes():
    """
    Generates a list of all possible 4-digit unique codes.
    (E.g.: "0123", "0124", ..., "9876")
    """
    digits = [str(i) for i in range(10)]
    possible_codes = ["".join(p) for p in itertools.permutations(digits, 4)]
    return possible_codes

def computer_guesses_round():
    """
    The computer tries to guess the code set by the player.
    The computer uses an elimination strategy.
    """
    print("\n--- Round 2: You are the Code Maker ---")
    print("Think of a 4-digit unique secret code (e.g., 1234, 0987).")
    print("Don't tell anyone! I (the computer) will try to guess it.")
    print("After each of my guesses, please provide the feedback (bulls and cows).")
    
    remaining_codes = generate_all_possible_codes() # Initial list of all possibilities
    
    num_attempts_comp = 0
    
    while True:
        num_attempts_comp += 1
        
        # Check if there are any possible codes left.
        # If the list is empty, it means the feedback given by the player was incorrect at some point.
        if not remaining_codes:
            print("\n🤔 Oops! It seems I ran out of options or you provided incorrect feedback.")
            print("I cannot guess your code. Game over.")
            return False

        # The computer chooses a random guess from the list of remaining codes
        computer_guess = random.choice(remaining_codes)

        print(f"\nComputer's Attempt {num_attempts_comp}: I guess '{computer_guess}'.")
        
        # Player enters feedback for the computer's guess
        while True:
            try:
                bulls_str = input("How many 'bulls' do I have (correct digit in correct position)? ")
                cows_str = input("How many 'cows' do I have (correct digit in wrong position)? ")
                
                player_bulls = int(bulls_str)
                player_cows = int(cows_str)

                # Validate player's feedback
                if not (0 <= player_bulls <= 4 and
                        0 <= player_cows <= 4 and
                        player_bulls + player_cows <= 4):
                    print("Invalid feedback. Bulls and cows must be numbers between 0 and 4, and their sum must not exceed 4.")
                    continue
                break # Feedback is valid, exit the validation loop
            except ValueError:
                print("Invalid input. Please enter a number.")
        
        # Check if the computer guessed the code
        if player_bulls == 4:
            print(f"\n🎉 I guessed it! Your code was '{computer_guess}'! It took me {num_attempts_comp} attempts.")
            return True # Computer won the round

        # Filter the remaining codes based on the received feedback
        new_remaining_codes = []
        for possible_code in remaining_codes:
            # Calculate the feedback WE WOULD GET if 'possible_code' WAS the secret code
            # and 'computer_guess' WAS our current guess.
            test_bulls, test_cows = calculate_feedback(possible_code, computer_guess)
            
            # If the calculated feedback EXACTLY matches the feedback given by the player,
            # then 'possible_code' remains a valid candidate for the secret code.
            if (test_bulls == player_bulls and
                test_cows == player_cows):
                new_remaining_codes.append(possible_code)
        
        remaining_codes = new_remaining_codes
        print(f"I've narrowed down the possible codes to {len(remaining_codes)}.")

# --- Main Game Function ---

def play_mastermind():
    """
    The main function that orchestrates both rounds of the Mastermind game.
    """
    print("🎉 Welcome to Mastermind! 🎉")
    print("The goal is to guess the 4-digit unique secret code.")
    
    # Round 1
    player_won_round1 = player_guesses_round()

    # Round 2
    computer_won_round2 = computer_guesses_round()

    print("\n--- Game Summary ---")
    if player_won_round1:
        print("✅ In Round 1 (you guess), you won!")
    else:
        print("❌ In Round 1 (you guess), you lost.")
    
    if computer_won_round2:
        print("✅ In Round 2 (computer guesses), the computer guessed your code!")
    else:
        print("❌ In Round 2 (computer guesses), the computer couldn't guess your code (likely due to incorrect feedback or lack of options).")

    print("\nThanks for playing! See you soon! 👋")

# --- Start the Game ---
if __name__ == "__main__":
    play_mastermind()